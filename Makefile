MODULES = boot kernel libstd libpatchwork
TARGET_IMAGE = bin/PatchworkOS.img
VERSION_HEADER = include/common/version.h

PROGRAMS = $(basename $(notdir $(wildcard make/programs/*.mk)))

ROOT_PROGRAMS = init wall cursor taskbar dwm shell delete dir link move open read write
USER_PROGRAMS = $(filter-out $(ROOT_PROGRAMS),$(PROGRAMS))

QEMU_MEMORY ?= 2G
QEMU_CPUS ?= $(shell nproc 2>/dev/null || echo 8)
QEMU_MACHINE ?= q35
QEMU_ARGS ?=

QEMU_FLAGS = \
	-M $(QEMU_MACHINE) \
	-display sdl \
	-serial stdio \
	-drive format=raw,file=$(TARGET_IMAGE) \
	-m $(QEMU_MEMORY) \
	-smp $(QEMU_CPUS) \
	-cpu qemu64 \
	-drive if=pflash,format=raw,unit=0,file=lib/OVMFbin/OVMF_CODE-pure-efi.fd,readonly=on \
	-drive if=pflash,format=raw,unit=1,file=lib/OVMFbin/OVMF_VARS-pure-efi.fd

ifeq ($(DEBUG),1)
	ifneq ($(GDB),1)
		QEMU_FLAGS += -device isa-debug-exit
	endif
else
	QEMU_FLAGS += -no-shutdown -no-reboot
endif

ifeq ($(GDB),1)
	QEMU_FLAGS += -s -S
endif

.PHONY: all setup modules programs deploy run clean generate_version compile_commands format doxygen clean clean_programs nuke grub_loopback clone_acpica_and_compile_tests

all: setup modules programs deploy

generate_version:
	@GIT_VERSION_STRING=$$(git describe --tags --always --dirty --long 2>/dev/null || echo "unknown"); \
	echo "#pragma once" > $(VERSION_HEADER); \
	echo "" >> $(VERSION_HEADER); \
	echo "/**" >> $(VERSION_HEADER); \
	echo " * @file version.h" >> $(VERSION_HEADER); \
	echo " * @brief Generated by Makefile from Git information." >> $(VERSION_HEADER); \
	echo " */" >> $(VERSION_HEADER); \
	echo "" >> $(VERSION_HEADER); \
	echo "#define OS_NAME \"PatchworkOS\"" >> $(VERSION_HEADER); \
	echo "#define OS_VERSION \"$$GIT_VERSION_STRING\"" >> $(VERSION_HEADER); \
	echo "" >> $(VERSION_HEADER)

ifeq ($(TESTING),1)
setup: generate_version clone_acpica_and_compile_tests
	$(MAKE) -C lib/gnu-efi
else
setup: generate_version
	$(MAKE) -C lib/gnu-efi
endif

$(MODULES): setup
	$(MAKE) -f make/$@.mk SRCDIR=src/$@ BUILDDIR=build/$@ BINDIR=bin/$@

$(PROGRAMS): $(MODULES)
	$(MAKE) -f make/programs/$@.mk SRCDIR=src/programs/$@ BUILDDIR=build/programs/$@ BINDIR=bin/programs PROGRAM=$@

deploy: $(PROGRAMS)
	dd if=/dev/zero of=$(TARGET_IMAGE) bs=2M count=64
	mformat -F -C -t 256 -h 16 -s 63 -v "PATCHWORKOS" -i $(TARGET_IMAGE) ::
	mlabel -i $(TARGET_IMAGE) ::PatchworkOS
	mmd -i $(TARGET_IMAGE) ::/acpi
	mmd -i $(TARGET_IMAGE) ::/boot
	mmd -i $(TARGET_IMAGE) ::/bin
	mmd -i $(TARGET_IMAGE) ::/efi
	mmd -i $(TARGET_IMAGE) ::/efi/boot
	mmd -i $(TARGET_IMAGE) ::/usr
	mmd -i $(TARGET_IMAGE) ::/usr/bin
	mmd -i $(TARGET_IMAGE) ::/usr/license
	mmd -i $(TARGET_IMAGE) ::/home
	mmd -i $(TARGET_IMAGE) ::/dev
	mmd -i $(TARGET_IMAGE) ::/net
	mmd -i $(TARGET_IMAGE) ::/proc
	mcopy -i $(TARGET_IMAGE) -s root/* ::
	mcopy -i $(TARGET_IMAGE) -s bin/boot/bootx64.efi ::/efi/boot
	mcopy -i $(TARGET_IMAGE) -s bin/kernel/kernel ::/boot
	mcopy -i $(TARGET_IMAGE) -s LICENSE ::/usr/license
	$(foreach prog,$(ROOT_PROGRAMS),mcopy -i $(TARGET_IMAGE) -s bin/programs/$(prog) ::/bin;)
	$(foreach prog,$(USER_PROGRAMS),mcopy -i $(TARGET_IMAGE) -s bin/programs/$(prog) ::/usr/bin;)

run: all
	qemu-system-x86_64 $(QEMU_FLAGS) $(QEMU_ARGS)

# This will only work if you have setup a grub loopback entry as described in the README.md file.
grub_loopback:
	cp $(TARGET_IMAGE) /data/PatchworkOS.img

compile_commands: clean
	bear -- $(MAKE) all

format:
	find src/ include/ meta/doxy tools/ -iname '*.h' -o -iname '*.c' -o -iname '*.dox' | xargs clang-format -style=file -i

doxygen:
	if [ ! -d "meta/docs/doxygen-awesome-css" ]; then \
	    git clone https://github.com/jothepro/doxygen-awesome-css.git meta/docs/doxygen-awesome-css; \
		cd meta/docs/doxy/doxygen-awesome-css; \
		git checkout v2.3.4; \
		cd ../../../..; \
	fi
	doxygen meta/doxy/Doxyfile
	mkdir -p meta/docs/html/meta/screenshots
	cp meta/screenshots/* meta/docs/html/meta/screenshots/

clean:
	rm -rf build
	rm -rf bin
	rm -rf $(VERSION_HEADER)

clean_programs:
	rm -rf build/programs
	rm -rf bin/programs

nuke: clean
	$(MAKE) -C lib/gnu-efi clean
	rm -rf lib/doomgeneric-patchworkos
	rm -rf lib/lua-5.4.7
	rm -rf lib/acpica
	rm -rf lib/acpica_tests

# We use ACPICA's runtime test suite to validate our ACPI implementation.
#
# ACPICA runtime tests are all found in tests/aslts/src/runtime/collections in the ACPICA repository.
# Each collection includes sub-collections and have a "FULL" sub-collection that includes all tests in the collection.
# We want each sub-collection on their own, each sub-collection has a MAIN.asl file that contain a MAIN method, these are the files we want to compile.
#
# At least this is my interpretation of the ACPICA test structure. Could be wrong but it seems to work.
#
# We clone the ACPICA repository if we don't have it already, then we find all MAIN.asl files that are not in a "FULL" sub-collection,
# compile them to AML using iasl and convert the AML to a C header file using xxd, finally we create a single file that includes all tests.
#
# We can then in `aml_tests.c` include this generated file and run all tests in a loop.
#
# Note that we probably dont want all collections. For now we only use the "functional" collection and we will add more later.
#
# Please check the ACPICA repo for more information.
#
# And yeah the make code is a mess.

ACPICA_COLLECTIONS = functional

clone_acpica_and_compile_tests:
	@if [ ! -d "lib/acpica" ]; then \
		git clone https://github.com/KaiNorberg/acpica.git -b fix_runtime_implicit_return_test lib/acpica; \
	fi
	@if [ ! -d "lib/acpica_tests" ]; then \
		mkdir -p lib/acpica_tests; \
		cd lib/acpica && \
		COLLECTIONS="$(ACPICA_COLLECTIONS)"; \
		for COLLECTION in $$COLLECTIONS; do \
			ALL_FILES=$$(find tests/aslts/src/runtime/collections/$$COLLECTION -type f -name 'MAIN.asl' ! -path '*FULL*' 2>/dev/null); \
			for FILE in $$ALL_FILES; do \
				DIR=$$(dirname $$FILE); \
				OUT_DIR=../acpica_tests/$${DIR#tests/aslts/src/runtime/collections/}; \
				mkdir -p $$OUT_DIR; \
				echo "Compiling asl test $$FILE to $$OUT_DIR/test.aml and $$OUT_DIR/test.h"; \
				iasl -va -oa -f -p $$OUT_DIR/test.aml $$FILE > /dev/null; \
				xxd -i $$OUT_DIR/test.aml $$OUT_DIR/test.h > /dev/null; \
			done; \
		done; \
	fi
	@if [ ! -f "lib/acpica_tests/all_tests.h" ]; then \
        cd lib/acpica_tests; \
		# Generate a file that includes all test.h files and contains an array that lists them all. \
		touch all_tests.h; \
		echo "#pragma once" > all_tests.h; \
		echo "" >> all_tests.h; \
        echo "/**" >> all_tests.h; \
        echo " * @file all_tests.h" >> all_tests.h; \
        echo " * @brief Generated by Makefile from ACPICA test suite." >> all_tests.h; \
        echo " */" >> all_tests.h; \
        echo "" >> all_tests.h; \
        find . -type f -name 'test.h' | while read line; do \
            echo "#include \"$${line#lib/}\"" >> all_tests.h; \
        done; \
        echo "" >> all_tests.h; \
        echo "#define ACPICA_TEST_COUNT $$(find ../acpica_tests -type f -name 'test.h' | wc -l)" >> all_tests.h; \
        echo "" >> all_tests.h; \
        echo "typedef struct" >> all_tests.h; \
        echo "{" >> all_tests.h; \
        echo "    const char* name;" >> all_tests.h; \
        echo "    unsigned int length;" >> all_tests.h; \
        echo "    unsigned char* aml;" >> all_tests.h; \
        echo "} acpica_test_t;" >> all_tests.h; \
        echo "" >> all_tests.h; \
        echo "static acpica_test_t acpicaTests[ACPICA_TEST_COUNT] = {" >> all_tests.h; \
        find . -type f -name 'test.aml' | while read line; do \
            # Construct the name that xxd uses for example ___acpica_tests_service_condbranches_test_aml for acpica_tests/service/condbranches/test.aml \
            XXD_NAME=___acpica_tests_$$(echo $${line#./} | tr '/' '_' | tr '-' '_' | tr '.' '_'); \
            echo "    { \"$${line#./}\", sizeof($${XXD_NAME}), $${XXD_NAME} }," >> all_tests.h; \
        done; \
        echo "};" >> all_tests.h; \
        cd ../..; \
	fi
