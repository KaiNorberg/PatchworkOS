#pragma once

// Exception vectors
#define VECTOR_DIVIDE_ERROR 0x0
#define VECTOR_DEBUG 0x1
#define VECTOR_NMI 0x2
#define VECTOR_BREAKPOINT 0x3
#define VECTOR_OVERFLOW 0x4
#define VECTOR_BOUND_RANGE_EXCEEDED 0x5
#define VECTOR_INVALID_OPCODE 0x6
#define VECTOR_DEVICE_NOT_AVAILABLE 0x7
#define VECTOR_DOUBLE_FAULT 0x8
#define VECTOR_COPROCESSOR_SEGMENT_OVERRUN 0x9
#define VECTOR_INVALID_TSS 0xA
#define VECTOR_SEGMENT_NOT_PRESENT 0xB
#define VECTOR_STACK_FAULT 0xC
#define VECTOR_GENERAL_PROTECTION 0xD
#define VECTOR_PAGE_FAULT 0xE
#define VECTOR_RESERVED 0xF
#define VECTOR_X87_FPU_ERROR 0x10
#define VECTOR_ALIGNMENT_CHECK 0x11
#define VECTOR_MACHINE_CHECK 0x12
#define VECTOR_SIMD_EXCEPTION 0x13
#define VECTOR_VIRTUALIZATION_EXCEPTION 0x14
#define VECTOR_CONTROL_PROTECTION_EXCEPTION 0x15

// IRQ vectors
#define VECTOR_IRQ_BASE 0x20

// System vectors
#define VECTOR_HALT 0x80
#define VECTOR_TIMER 0x81

#define VECTOR_AMOUNT 256

extern void* vectorTable[VECTOR_AMOUNT];
