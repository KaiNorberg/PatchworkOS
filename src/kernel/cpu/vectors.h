#pragma once

/**
 * @brief CPU Vectors
 * @defgroup kernel_cpu_vectors Vectors
 * @ingroup kernel_cpu
 *
 * Defines the CPU exception and interrupt vectors used in the kernel.
 *
 * @{
 */

/**
 * @brief CPU vector identifiers.
 *
 * External interrupts (IRQ's) are defined in `irq_t`.
 */
typedef enum
{
    EXCEPTION_DIVIDE_ERROR = 0x0,
    EXCEPTION_DEBUG = 0x1,
    EXCEPTION_NMI = 0x2,
    EXCEPTION_BREAKPOINT = 0x3,
    EXCEPTION_OVERFLOW = 0x4,
    EXCEPTION_BOUND_RANGE_EXCEEDED = 0x5,
    EXCEPTION_INVALID_OPCODE = 0x6,
    EXCEPTION_DEVICE_NOT_AVAILABLE = 0x7,
    EXCEPTION_DOUBLE_FAULT = 0x8,
    EXCEPTION_COPROCESSOR_SEGMENT_OVERRUN = 0x9,
    EXCEPTION_INVALID_TSS = 0xA,
    EXCEPTION_SEGMENT_NOT_PRESENT = 0xB,
    EXCEPTION_STACK_FAULT = 0xC,
    EXCEPTION_GENERAL_PROTECTION = 0xD,
    EXCEPTION_PAGE_FAULT = 0xE,
    EXCEPTION_RESERVED = 0xF,
    EXCEPTION_X87_FPU_ERROR = 0x10,
    EXCEPTION_ALIGNMENT_CHECK = 0x11,
    EXCEPTION_MACHINE_CHECK = 0x12,
    EXCEPTION_SIMD_EXCEPTION = 0x13,
    EXCEPTION_VIRTUALIZATION_EXCEPTION = 0x14,
    EXCEPTION_CONTROL_PROTECTION_EXCEPTION = 0x15,
    EXCEPTION_RESERVED_16 = 0x16,
    EXCEPTION_RESERVED_17 = 0x17,
    EXCEPTION_RESERVED_18 = 0x18,
    EXCEPTION_RESERVED_19 = 0x19,
    EXCEPTION_RESERVED_1A = 0x1A,
    EXCEPTION_RESERVED_1B = 0x1B,
    EXCEPTION_RESERVED_1C = 0x1C,
    EXCEPTION_RESERVED_1D = 0x1D,
    EXCEPTION_RESERVED_1E = 0x1E,
    EXCEPTION_RESERVED_1F = 0x1F,
    EXCEPTION_AMOUNT = 0x20,

    EXTERNAL_INTERRUPT_BASE = 0x20,

    VECTOR_NOTE = 0xFC,
    VECTOR_TIMER = 0xFD,
    VECTOR_HALT = 0xFE,
    VECTOR_AMOUNT = 0xFF
} vector_t;

/**
 * @brief Pointers to functions to handle each vector.
 */
extern void* vectorTable[VECTOR_AMOUNT];

/** @} */
