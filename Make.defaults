recursive_wildcard = $(foreach d,$(wildcard $(1:=/*)),$(call recursive_wildcard,$d,$2) $(filter $(subst *,%,$2),$d))

SRC_DIR = ./
BUILD_DIR = $(PATCHWORK_DIR)/build/$(PARENT_DIR)
BIN_DIR = $(PATCHWORK_DIR)/bin/$(PARENT_DIR)

ASM_SOURCE = $(call recursive_wildcard, $(SRC_DIR), *.asm)
SOURCE = $(call recursive_wildcard, $(SRC_DIR), *.c)
OBJECTS = $(patsubst $(SRC_DIR)/%.c, $(BUILD_DIR)/%.o, $(SOURCE))
OBJECTS += $(patsubst $(SRC_DIR)/%.asm, $(BUILD_DIR)/%.asm.o, $(ASM_SOURCE))
OUTPUT = $(BIN_DIR)/$(OUTPUTNAME)

CC = gcc
C_FLAGS = -Os -Wall -ffreestanding -fno-stack-protector -fno-exceptions -I $(SRC_DIR)

LD = ld
LINKER_SCRIPT = linker.ld
LD_FLAGS = -T $(LINKER_SCRIPT) -Bsymbolic -nostdlib

ASM = nasm
ASM_FLAGS = -f elf64

COM_COLOR   = \033[0;94m
OBJ_COLOR   = \033[0;94m
DONE_COLOR  = \033[0;96m
OK_COLOR    = \033[0;32m
ERROR_COLOR = \033[0;31m
WARN_COLOR  = \033[0;33m
NO_COLOR    = \033[m

OK_STRING    = "DONE"
ERROR_STRING = "ERROR"
WARN_STRING  = "WARNING"
WAIT_STRING  = "[..]"

define run_and_test
printf "$(NO_COLOR)$(1)... "; \
$(1) 2> $@.log; \
RESULT=$$?; \
if [ $$RESULT -ne 0 ]; then \
	printf "$(ERROR_COLOR)$(ERROR_STRING)$(NO_COLOR)\n"   ; \
elif [ -s $@.log ]; then \
	printf "$(WARN_COLOR)$(WARN_STRING)$(NO_COLOR)\n"   ; \
else  \
	printf "$(OK_COLOR)$(OK_STRING)$(NO_COLOR)\n"   ; \
fi; \
cat $@.log; \
rm -f $@.log; \
exit $$RESULT
endef